from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
import requests
import os
from dotenv import load_dotenv
import json
import threading
import time
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, PatternFill
import io
import pickle
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –§–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ API
load_dotenv()

app = Flask(__name__)
CORS(app)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
current_processes = {
    'search_names': False,
    'search_emails': False
}

organizations_data = []

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
def save_organizations_data(data, city):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –≤ —Ñ–∞–π–ª"""
    try:
        filename = f"data_{city.replace(' ', '_')}.pkl"
        filepath = os.path.join('exports', filename)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs('exports', exist_ok=True)
        
        with open(filepath, 'wb') as f:
            pickle.dump(data, f)
        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filepath}")
        return filepath
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def load_organizations_data(city):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        filename = f"data_{city.replace(' ', '_')}.pkl"
        filepath = os.path.join('exports', filename)
        
        if os.path.exists(filepath):
            with open(filepath, 'rb') as f:
                data = pickle.load(f)
            print(f"üìÇ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞: {filepath}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(data)}")
            return data
        else:
            print(f"üìÇ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
            return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

class YandexSearchAPI:
    def __init__(self):
        # –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –§–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ API
        self.api_key = os.getenv('YANDEX_SEARCH__API_KEY')
        self.base_url = 'https://search-maps.yandex.ru/v1/'
        
    
    def search_organizations(self, city, selected_types, stop_flag):
        """–ü–æ–∏—Å–∫ –∫—É—Ä–æ—Ä—Ç–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ"""
        print(f"üîë API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω: {'–î–∞' if self.api_key else '–ù–µ—Ç'}")
        print(f"üîë API –∫–ª—é—á: {self.api_key[:10] if self.api_key else 'None'}...")
        print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: {not self.api_key or self.api_key == 'test_yandex_key'}")
        print(f"üîë –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã: {selected_types}")
        
        if not self.api_key or self.api_key == 'test_yandex_key' or self.api_key == 'demo_mode':
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–∫–∏ –°–¢–û–ü
            import time
            for i in range(5):  # 5 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∏
                if stop_flag():
                    print("–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    return {'organizations': []}
                print(f"–ü–æ–∏—Å–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π... {i+1}/5")
                time.sleep(1)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
            all_test_organizations = [
                # –ì–æ—Å—Ç–∏–Ω–∏—Ü—ã
                {
                    'name': f'–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞ "–ú–æ—Ä—Å–∫–∞—è" –≤ {city}',
                    'coordinates': [39.7233, 43.5855],  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –°–æ—á–∏
                    'yandex_id': 'test_id_1',
                    'full_address': f'—É–ª. –ú–æ—Ä—Å–∫–∞—è, 1, {city}, –†–æ—Å—Å–∏—è',
                    'website': 'https://morskaya-hotel.ru',
                    'email': '',
                    'type': '–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞',
                    'city': city
                },
                {
                    'name': f'–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞ "–ü—Ä–∏–º–æ—Ä—Å–∫–∞—è" –≤ {city}',
                    'coordinates': [39.7240, 43.5860],
                    'yandex_id': 'test_id_7',
                    'full_address': f'—É–ª. –ü—Ä–∏–º–æ—Ä—Å–∫–∞—è, 25, {city}, –†–æ—Å—Å–∏—è',
                    'website': 'https://primorskaya-hotel.ru',
                    'email': '',
                    'type': '–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞',
                    'city': city
                },
                {
                    'name': f'–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞ "–í–æ–ª–Ω–∞" –≤ {city}',
                    'coordinates': [39.7225, 43.5850],
                    'yandex_id': 'test_id_8',
                    'full_address': f'—É–ª. –í–æ–ª–Ω–æ–≤–∞—è, 12, {city}, –†–æ—Å—Å–∏—è',
                    'website': 'https://volna-hotel.ru',
                    'email': '',
                    'type': '–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞',
                    'city': city
                },
                # –ë–∞–∑—ã –æ—Ç–¥—ã—Ö–∞
                {
                    'name': f'–ë–∞–∑–∞ –æ—Ç–¥—ã—Ö–∞ "–°–æ–ª–Ω–µ—á–Ω–∞—è" –≤ {city}',
                    'coordinates': [39.7233, 43.5855],
                    'yandex_id': 'test_id_2',
                    'full_address': f'—É–ª. –°–æ–ª–Ω–µ—á–Ω–∞—è, 15, {city}, –†–æ—Å—Å–∏—è',
                    'website': 'https://solnetsnaya-base.ru',
                    'email': '',
                    'type': '–±–∞–∑–∞ –æ—Ç–¥—ã—Ö–∞',
                    'city': city
                },
                {
                    'name': f'–ë–∞–∑–∞ –æ—Ç–¥—ã—Ö–∞ "–õ–µ—Å–Ω–∞—è" –≤ {city}',
                    'coordinates': [39.7245, 43.5870],
                    'yandex_id': 'test_id_9',
                    'full_address': f'—É–ª. –õ–µ—Å–Ω–∞—è, 8, {city}, –†–æ—Å—Å–∏—è',
                    'website': 'https://lesnaya-base.ru',
                    'email': '',
                    'type': '–±–∞–∑–∞ –æ—Ç–¥—ã—Ö–∞',
                    'city': city
                },
                {
                    'name': f'–ë–∞–∑–∞ –æ—Ç–¥—ã—Ö–∞ "–ì–æ—Ä–Ω–∞—è" –≤ {city}',
                    'coordinates': [39.7220, 43.5840],
                    'yandex_id': 'test_id_10',
                    'full_address': f'—É–ª. –ì–æ—Ä–Ω–∞—è, 33, {city}, –†–æ—Å—Å–∏—è',
                    'website': 'https://gornaya-base.ru',
                    'email': '',
                    'type': '–±–∞–∑–∞ –æ—Ç–¥—ã—Ö–∞',
                    'city': city
                },
                # –°–∞–Ω–∞—Ç–æ—Ä–∏–∏
                {
                    'name': f'–°–∞–Ω–∞—Ç–æ—Ä–∏–π "–ó–¥–æ—Ä–æ–≤—å–µ" –≤ {city}',
                    'coordinates': [39.7233, 43.5855],
                    'yandex_id': 'test_id_3',
                    'full_address': f'—É–ª. –õ–µ—Å–Ω–∞—è, 25, {city}, –†–æ—Å—Å–∏—è',
                    'website': 'https://zdorovie-sanatorium.ru',
                    'email': '',
                    'type': '—Å–∞–Ω–∞—Ç–æ—Ä–∏–π',
                    'city': city
                },
                {
                    'name': f'–°–∞–Ω–∞—Ç–æ—Ä–∏–π "–ú–æ—Ä—Å–∫–æ–π" –≤ {city}',
                    'coordinates': [39.7250, 43.5865],
                    'yandex_id': 'test_id_11',
                    'full_address': f'—É–ª. –ú–æ—Ä—Å–∫–∞—è, 45, {city}, –†–æ—Å—Å–∏—è',
                    'website': 'https://morskoy-sanatorium.ru',
                    'email': '',
                    'type': '—Å–∞–Ω–∞—Ç–æ—Ä–∏–π',
                    'city': city
                },
                {
                    'name': f'–°–∞–Ω–∞—Ç–æ—Ä–∏–π "–õ–µ—Å–Ω–æ–π" –≤ {city}',
                    'coordinates': [39.7215, 43.5845],
                    'yandex_id': 'test_id_12',
                    'full_address': f'—É–ª. –õ–µ—Å–Ω–∞—è, 67, {city}, –†–æ—Å—Å–∏—è',
                    'website': 'https://lesnoy-sanatorium.ru',
                    'email': '',
                    'type': '—Å–∞–Ω–∞—Ç–æ—Ä–∏–π',
                    'city': city
                },
                # –ì–æ—Å—Ç–µ–≤—ã–µ –¥–æ–º–∞
                {
                    'name': f'–ì–æ—Å—Ç–µ–≤–æ–π –¥–æ–º "–£—é—Ç–Ω—ã–π" –≤ {city}',
                    'coordinates': [39.7233, 43.5855],
                    'yandex_id': 'test_id_4',
                    'full_address': f'—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è, 10, {city}, –†–æ—Å—Å–∏—è',
                    'website': 'https://uyutny-guesthouse.ru',
                    'email': '',
                    'type': '–≥–æ—Å—Ç–µ–≤–æ–π –¥–æ–º',
                    'city': city
                },
                {
                    'name': f'–ì–æ—Å—Ç–µ–≤–æ–π –¥–æ–º "–°–µ–º–µ–π–Ω—ã–π" –≤ {city}',
                    'coordinates': [39.7240, 43.5860],
                    'yandex_id': 'test_id_13',
                    'full_address': f'—É–ª. –°–µ–º–µ–π–Ω–∞—è, 22, {city}, –†–æ—Å—Å–∏—è',
                    'website': 'https://semeyny-guesthouse.ru',
                    'email': '',
                    'type': '–≥–æ—Å—Ç–µ–≤–æ–π –¥–æ–º',
                    'city': city
                },
                {
                    'name': f'–ì–æ—Å—Ç–µ–≤–æ–π –¥–æ–º "–î–æ–º–∞—à–Ω–∏–π" –≤ {city}',
                    'coordinates': [39.7225, 43.5850],
                    'yandex_id': 'test_id_14',
                    'full_address': f'—É–ª. –î–æ–º–∞—à–Ω—è—è, 18, {city}, –†–æ—Å—Å–∏—è',
                    'website': 'https://domashny-guesthouse.ru',
                    'email': '',
                    'type': '–≥–æ—Å—Ç–µ–≤–æ–π –¥–æ–º',
                    'city': city
                },
                # –•–æ—Å—Ç–µ–ª—ã
                {
                    'name': f'–•–æ—Å—Ç–µ–ª "–ú–æ–ª–æ–¥–µ–∂–Ω—ã–π" –≤ {city}',
                    'coordinates': [39.7233, 43.5855],
                    'yandex_id': 'test_id_5',
                    'full_address': f'—É–ª. –ú–æ–ª–æ–¥–µ–∂–Ω–∞—è, 5, {city}, –†–æ—Å—Å–∏—è',
                    'website': 'https://molodezhny-hostel.ru',
                    'email': '',
                    'type': '—Ö–æ—Å—Ç–µ–ª',
                    'city': city
                },
                {
                    'name': f'–•–æ—Å—Ç–µ–ª "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π" –≤ {city}',
                    'coordinates': [39.7245, 43.5870],
                    'yandex_id': 'test_id_15',
                    'full_address': f'—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è, 14, {city}, –†–æ—Å—Å–∏—è',
                    'website': 'https://centralny-hostel.ru',
                    'email': '',
                    'type': '—Ö–æ—Å—Ç–µ–ª',
                    'city': city
                },
                {
                    'name': f'–•–æ—Å—Ç–µ–ª "–≠–∫–æ–Ω–æ–º" –≤ {city}',
                    'coordinates': [39.7220, 43.5840],
                    'yandex_id': 'test_id_16',
                    'full_address': f'—É–ª. –≠–∫–æ–Ω–æ–º–Ω–∞—è, 7, {city}, –†–æ—Å—Å–∏—è',
                    'website': 'https://ekonom-hostel.ru',
                    'email': '',
                    'type': '—Ö–æ—Å—Ç–µ–ª',
                    'city': city
                },
                # –î–æ–º–∞ –æ—Ç–¥—ã—Ö–∞
                {
                    'name': f'–î–æ–º –æ—Ç–¥—ã—Ö–∞ "–õ–µ—Å–Ω–∞—è –ø–æ–ª—è–Ω–∞" –≤ {city}',
                    'coordinates': [39.7233, 43.5855],
                    'yandex_id': 'test_id_6',
                    'full_address': f'—É–ª. –õ–µ—Å–Ω–∞—è, 30, {city}, –†–æ—Å—Å–∏—è',
                    'website': 'https://lesnaya-polyana.ru',
                    'email': '',
                    'type': '–¥–æ–º –æ—Ç–¥—ã—Ö–∞',
                    'city': city
                },
                {
                    'name': f'–î–æ–º –æ—Ç–¥—ã—Ö–∞ "–ú–æ—Ä—Å–∫–æ–π –±–µ—Ä–µ–≥" –≤ {city}',
                    'coordinates': [39.7250, 43.5865],
                    'yandex_id': 'test_id_17',
                    'full_address': f'—É–ª. –ú–æ—Ä—Å–∫–∞—è, 55, {city}, –†–æ—Å—Å–∏—è',
                    'website': 'https://morskoy-bereg.ru',
                    'email': '',
                    'type': '–¥–æ–º –æ—Ç–¥—ã—Ö–∞',
                    'city': city
                },
                {
                    'name': f'–î–æ–º –æ—Ç–¥—ã—Ö–∞ "–ì–æ—Ä–Ω—ã–π –≤–æ–∑–¥—É—Ö" –≤ {city}',
                    'coordinates': [39.7215, 43.5845],
                    'yandex_id': 'test_id_18',
                    'full_address': f'—É–ª. –ì–æ—Ä–Ω–∞—è, 88, {city}, –†–æ—Å—Å–∏—è',
                    'website': 'https://gorny-vozduh.ru',
                    'email': '',
                    'type': '–¥–æ–º –æ—Ç–¥—ã—Ö–∞',
                    'city': city
                }
            ]
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–∏–ø–∞–º
            filtered_organizations = [org for org in all_test_organizations if org['type'] in selected_types]
            print(f"–í—ã–±—Ä–∞–Ω–æ —Ç–∏–ø–æ–≤: {selected_types}")
            print(f"–ù–∞–π–¥–µ–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: {len(filtered_organizations)}")
            
            return {'organizations': filtered_organizations}
        
        print(f"–ü–æ–∏—Å–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –≤ –≥–æ—Ä–æ–¥–µ: {city}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
        organization_types = selected_types
        
        results = []
        
        for i, org_type in enumerate(organization_types):
            print(f"[{i+1}/{len(organization_types)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–ø: {org_type}")
            
            if stop_flag():
                print(f"–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ç–∏–ø–µ: {org_type}")
                break
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–∫–∏ –°–¢–û–ü
            import time
            time.sleep(1)
                
            query = f"{org_type} {city}"
            print(f"–§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å: '{query}'")
            print(f"üîç –¢–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: '{org_type}'")
            print(f"üîç –ì–æ—Ä–æ–¥: '{city}'")
            params = {
                'text': query,
                'type': 'biz',
                'lang': 'ru_RU',
                'apikey': self.api_key,
                'results': 20
            }
            
            try:
                print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API: {self.base_url}")
                response = requests.get(self.base_url, params=params, timeout=10)
                print(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: —Å—Ç–∞—Ç—É—Å {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ Yandex API: {list(data.keys())}")
                    
                    features = data.get('features', [])
                    print(f"üìä API –≤–µ—Ä–Ω—É–ª {len(features)} –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–∏–ø–∞ '{org_type}'")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    if features:
                        first_feature = features[0]
                        print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±—ä–µ–∫—Ç–∞: {list(first_feature.keys())}")
                        print(f"üìä Properties: {list(first_feature.get('properties', {}).keys())}")
                        print(f"üìä Geometry: {list(first_feature.get('geometry', {}).keys())}")
                    
                    if len(features) == 0:
                        print(f"–ù–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π —Ç–∏–ø–∞ '{org_type}' –≤ –≥–æ—Ä–æ–¥–µ '{city}'")
                        continue
                    
                    added_count = 0
                    for j, feature in enumerate(features):
                        if stop_flag():
                            print(f"–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—ä–µ–∫—Ç–∞ {j+1} —Ç–∏–ø–∞ {org_type}")
                            break
                            
                        properties = feature.get('properties', {})
                        geometry = feature.get('geometry', {})
                        
                        org_name = properties.get('name', '')
                        org_description = properties.get('description', '')
                        
                        print(f"  [{j+1}/{len(features)}] –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: '{org_name}'")
                        print(f"      –ê–¥—Ä–µ—Å: '{org_description}'")
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CompanyMetaData
                        company_meta = properties.get('CompanyMetaData', {})
                        yandex_id = company_meta.get('id', '')
                        full_address = company_meta.get('address', org_description)
                        website = company_meta.get('url', '')
                        
                        print(f"      ID –∏–∑ CompanyMetaData: {yandex_id}")
                        print(f"      –ê–¥—Ä–µ—Å –∏–∑ CompanyMetaData: {full_address}")
                        print(f"      –í–µ–±-—Å–∞–π—Ç –∏–∑ CompanyMetaData: {website}")
                        
                        org_data = {
                            'name': org_name,
                            'coordinates': geometry.get('coordinates', []),
                            'yandex_id': yandex_id or f"yandex_{len(results)+1:04d}_{org_type.replace(' ', '_')}",
                            'full_address': full_address or org_description,
                            'website': website or f"https://{org_name[:15].replace(' ', '').lower()}.ru",
                            'email': '',         # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω LLM
                            'type': org_type,
                            'city': city
                        }
                        
                        if org_data['name'] and org_data not in results:
                            results.append(org_data)
                            added_count += 1
                            print(f"      ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (ID: {org_data['yandex_id']}, –°–∞–π—Ç: {org_data['website']})")
                        else:
                            print(f"      ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–∞ (–¥—É–±–ª–∏–∫–∞—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)")
                    
                    print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –Ω–æ–≤—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π —Ç–∏–ø–∞ '{org_type}'")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                    print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text[:200]}...")
                    
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ {org_type}: {e}")
                continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
            time.sleep(0.5)
                
            print(f"–ó–∞–≤–µ—Ä—à–µ–Ω –ø–æ–∏—Å–∫ —Ç–∏–ø–∞ '{org_type}'. –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(results)}")
            print("-" * 50)
        
        print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: {len(results)}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–∏–ø–∞–º (–∫–∞–∫ –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        print(f"üîç –î–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(results)} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")
        print(f"üîç –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã: {selected_types}")
        for i, org in enumerate(results[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"  [{i+1}] {org.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - –¢–∏–ø: '{org.get('type', '–ù–µ—Ç')}'")
        
        filtered_results = [org for org in results if org['type'] in selected_types]
        print(f"üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º: {len(filtered_results)} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")
        
        return {'organizations': filtered_results}
    
    def get_organization_details_by_coordinates(self, lon, lat, stop_flag):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
        if not self.api_key:
            return {'error': 'API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω'}
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –≥–µ–æ–∫–æ–¥–∏–Ω–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        params = {
            'geocode': f"{lon},{lat}",
            'kind': 'house',
            'format': 'json',
            'results': 1,
            'lang': 'ru_RU',
            'apikey': self.api_key
        }
        
        try:
            print(f"      üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: {lat}, {lon}")
            response = requests.get("https://geocode-maps.yandex.ru/1.x/", params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                features = data.get('response', {}).get('GeoObjectCollection', {}).get('featureMember', [])
                
                if features:
                    feature = features[0]
                    properties = feature.get('GeoObject', {}).get('metaDataProperty', {}).get('GeocoderMetaData', {})
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    yandex_id = properties.get('id', '')
                    full_address = properties.get('text', '')
                    
                    print(f"      üìç –ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ID={yandex_id[:20]}..., –ê–¥—Ä–µ—Å={full_address[:50]}...")
                    
                    return {
                        'yandex_id': yandex_id,
                        'full_address': full_address,
                        'website': '',  # –í –≥–µ–æ–∫–æ–¥–∏–Ω–≥–µ –Ω–µ—Ç –≤–µ–±-—Å–∞–π—Ç–∞
                        'phone': '',
                        'hours': ''
                    }
                else:
                    print(f"      ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º")
                    return {'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º'}
            else:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞: {response.status_code}")
                return {'error': f'–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞: {response.status_code}'}
                
        except Exception as e:
            print(f"      ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≥–µ–æ–∫–æ–¥–∏–Ω–≥–µ: {e}")
            return {'error': f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}'}

    def search_website_by_name(self, org_name, city, stop_flag):
        """–ü–æ–∏—Å–∫ –≤–µ–±-—Å–∞–π—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        if not self.api_key:
            return {'error': 'API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω'}
        
        # –ò—â–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ø–æ —Ç–æ—á–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
        params = {
            'text': f"{org_name} {city}",
            'type': 'biz',
            'lang': 'ru_RU',
            'results': 1,
            'apikey': self.api_key
        }
        
        try:
            print(f"      üåê –ò—â–µ–º –≤–µ–±-—Å–∞–π—Ç –¥–ª—è: {org_name}")
            response = requests.get(self.base_url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                features = data.get('features', [])
                
                if features:
                    feature = features[0]
                    properties = feature.get('properties', {})
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–µ–±-—Å–∞–π—Ç–∞
                    website = (properties.get('website', '') or 
                             properties.get('url', '') or 
                             properties.get('site', '') or 
                             properties.get('web', ''))
                    
                    if website:
                        print(f"      üåê –ù–∞–π–¥–µ–Ω –≤–µ–±-—Å–∞–π—Ç: {website}")
                        return {'website': website}
                    else:
                        print(f"      ‚ùå –í–µ–±-—Å–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        return {'error': '–í–µ–±-—Å–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}
                else:
                    print(f"      ‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–µ–±-—Å–∞–π—Ç–∞")
                    return {'error': '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
            else:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–µ–±-—Å–∞–π—Ç–∞: {response.status_code}")
                return {'error': f'–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}'}
                
        except Exception as e:
            print(f"      ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–µ–±-—Å–∞–π—Ç–∞: {e}")
            return {'error': f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}'}

    def get_organization_details(self, yandex_id, stop_flag):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ ID"""
        if not self.api_key or not yandex_id:
            return {'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞'}
        
        params = {
            'id': yandex_id,
            'lang': 'ru_RU',
            'apikey': self.api_key
        }
        
        try:
            response = requests.get(f"{self.base_url}details", params=params, timeout=10)
            if response.status_code == 200:
                data = response.json()
                properties = data.get('properties', {})
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
                address_parts = []
                if properties.get('address'):
                    address_parts.append(properties['address'])
                if properties.get('description'):
                    address_parts.append(properties['description'])
                
                full_address = ', '.join(filter(None, address_parts))
                
                return {
                    'full_address': full_address,
                    'website': properties.get('website', ''),
                    'phone': properties.get('phone', ''),
                    'hours': properties.get('hours', '')
                }
            else:
                return {'error': f'–û—à–∏–±–∫–∞ API: {response.status_code}'}
        except Exception as e:
            return {'error': f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}'}

class ProxyAPIClient:
    def __init__(self):
        self.api_key = os.getenv('PROXYAPI_KEY')
        self.base_url = os.getenv('PROXYAPI_BASE_URL')
    
    def search_email(self, organization_name, city, stop_flag):
        """–ü–æ–∏—Å–∫ email –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ LLM"""
        if not self.api_key or not self.base_url:
            return {'error': 'ProxyAPI credentials –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}
        
        prompt = f"""
        –ù–∞–π–¥–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π email –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ "{organization_name}" –≤ –≥–æ—Ä–æ–¥–µ {city}.
        –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É—Å–ª—É–≥–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ç–¥—ã—Ö–∞—é—â–∏—Ö (–±–∞–∑–∞ –æ—Ç–¥—ã—Ö–∞, –¥–æ–º –æ—Ç–¥—ã—Ö–∞, –≥–æ—Å—Ç–∏–Ω–∏—Ü–∞, —Å–∞–Ω–∞—Ç–æ—Ä–∏–π, –≥–æ—Å—Ç–µ–≤–æ–π –¥–æ–º, —Ö–æ—Å—Ç–µ–ª).
        
        –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ email –∞–¥—Ä–µ—Å, –µ—Å–ª–∏ –Ω–∞–π–¥–µ—à—å. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ—à—å, –≤–µ—Ä–Ω–∏ "–Ω–µ –Ω–∞–π–¥–µ–Ω".
        """
        
        try:
            headers = {
                'Authorization': f'Bearer {self.api_key}',
                'Content-Type': 'application/json'
            }
            
            data = {
                'model': 'gpt-3.5-turbo',
                'messages': [
                    {'role': 'user', 'content': prompt}
                ],
                'max_tokens': 100
            }
            
            response = requests.post(
                f"{self.base_url}/v1/chat/completions",
                headers=headers,
                json=data,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                email = result.get('choices', [{}])[0].get('message', {}).get('content', '').strip()
                if '@' in email and email != '–Ω–µ –Ω–∞–π–¥–µ–Ω':
                    return {'email': email}
                else:
                    return {'email': '–Ω–µ –Ω–∞–π–¥–µ–Ω'}
            else:
                return {'error': f'–û—à–∏–±–∫–∞ API: {response.status_code}'}
                
        except Exception as e:
            return {'error': f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}'}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–æ–≤
yandex_api = YandexSearchAPI()
proxy_api = ProxyAPIClient()

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ–ø–µ—Ä—å –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç—Å—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º

@app.route('/api/search_organizations', methods=['POST'])
def search_organizations():
    global organizations_data, current_processes
    
    print(f"üöÄ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")
    data = request.json
    city = data.get('city', '').strip()
    selected_types = data.get('types', [])
    
    print(f"üèôÔ∏è –ì–æ—Ä–æ–¥: '{city}'")
    print(f"üìã –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã: {selected_types}")
    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤: {len(selected_types)}")
    
    if not city:
        print("‚ùå –û—à–∏–±–∫–∞: –ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω")
        return jsonify({'error': '–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400
    
    if not selected_types:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –≤—ã–±—Ä–∞–Ω—ã —Ç–∏–ø—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")
        return jsonify({'error': '–ù–µ –≤—ã–±—Ä–∞–Ω—ã —Ç–∏–ø—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π'}), 400
    
    # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø–æ–∏—Å–∫–µ
    global organizations_data
    organizations_data = []
    
    current_processes['search_names'] = True
    
    def search_task():
        global organizations_data, current_processes
        try:
            print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –≤ –≥–æ—Ä–æ–¥–µ: {city}")
            print(f"–§–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {current_processes['search_names']}")
            
            result = yandex_api.search_organizations(city, selected_types, lambda: not current_processes['search_names'])
            
            print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {result}")
            
            if 'error' not in result:
                global organizations_data
                organizations_data = result['organizations']
                print(f"‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(organizations_data)} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")
                print(f"üìä –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ organizations_data: {len(organizations_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: organizations_data —Å–æ–¥–µ—Ä–∂–∏—Ç {len(organizations_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                save_organizations_data(organizations_data, city)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {result['error']}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø–æ–∏—Å–∫–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: {e}")
        finally:
            current_processes['search_names'] = False
            print(f"üèÅ –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω. –§–ª–∞–≥: {current_processes['search_names']}")
    
    # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = threading.Thread(target=search_task)
    thread.start()
    
    return jsonify({'message': f'–ü–æ–∏—Å–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –≤ –≥–æ—Ä–æ–¥–µ {city} –∑–∞–ø—É—â–µ–Ω'})

@app.route('/api/search_emails', methods=['POST'])
def search_emails():
    global organizations_data, current_processes
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    data = request.json
    city = data.get('city', '').strip()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    organizations_data = load_organizations_data(city)
    
    if not organizations_data:
        return jsonify({'error': '–°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'}), 400
    
    current_processes['search_emails'] = True
    
    def email_search_task():
        global organizations_data, current_processes
        try:
            for i, org in enumerate(organizations_data):
                if not current_processes['search_emails']:
                    break
                
                if not org.get('email'):
                    result = proxy_api.search_email(org['name'], org.get('city', ''), 
                                                  lambda: not current_processes['search_emails'])
                    if 'email' in result:
                        organizations_data[i]['email'] = result['email']
                
                time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ email: {e}")
        finally:
            current_processes['search_emails'] = False
    
    thread = threading.Thread(target=email_search_task)
    thread.start()
    
    return jsonify({'message': '–ü–æ–∏—Å–∫ email –∞–¥—Ä–µ—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω'})


@app.route('/api/get_organizations', methods=['GET'])
def get_organizations():
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
    city = request.args.get('city', '').strip()
    
    if city:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        data_to_return = load_organizations_data(city)
        print(f"üì§ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'. –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(data_to_return)} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")
    else:
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        data_to_return = []
        print(f"üì§ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.")
    
    print(f"üìä –¢–µ–∫—É—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: {current_processes}")
    
    if data_to_return:
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(data_to_return)} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")
        for i, org in enumerate(data_to_return[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
            print(f"  [{i+1}] {org.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - ID: {org.get('yandex_id', '–ù–µ—Ç')} - –¢–∏–ø: {org.get('type', '–ù–µ—Ç')}")
        if len(data_to_return) > 5:
            print(f"  ... –∏ –µ—â–µ {len(data_to_return) - 5} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")
    else:
        print("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        
    return jsonify({'organizations': data_to_return})

@app.route('/api/stop_process', methods=['POST'])
def stop_process():
    data = request.json
    process_type = data.get('process_type')
    
    print(f"üõë –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞: {process_type}")
    print(f"–¢–µ–∫—É—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: {current_processes}")
    
    if process_type in current_processes:
        old_value = current_processes[process_type]
        current_processes[process_type] = False
        print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {process_type} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–±—ã–ª–æ: {old_value}, —Å—Ç–∞–ª–æ: {current_processes[process_type]})")
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: {current_processes}")
        return jsonify({'message': f'–ü—Ä–æ—Ü–µ—Å—Å {process_type} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'})
    
    print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ—Ü–µ—Å—Å–∞: {process_type}")
    print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: {list(current_processes.keys())}")
    return jsonify({'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ—Ü–µ—Å—Å–∞'}), 400

@app.route('/api/export_excel', methods=['GET'])
def export_excel():
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –≤ Excel —Ñ–∞–π–ª"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
        city_name = request.args.get('city', '').strip()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
        data_to_export = load_organizations_data(city_name)
        print(f"üìä –ó–∞–ø—Ä–æ—Å –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç Excel. –ì–æ—Ä–æ–¥: '{city_name}', –ù–∞–π–¥–µ–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: {len(data_to_export)}")
        
        if not data_to_export:
            return jsonify({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞'}), 400
        
        if not city_name:
            return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞'}), 400
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É
        wb = Workbook()
        ws = wb.active
        ws.title = "–ö—É—Ä–æ—Ä—Ç–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
        
        # –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        header_font = Font(bold=True, color="FFFFFF")
        header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        header_alignment = Alignment(horizontal="center", vertical="center")
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
        headers = [
            "–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
            "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—à–∏—Ä–æ—Ç–∞/–¥–æ–ª–≥–æ—Ç–∞)", 
            "ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
            "–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å",
            "–í–µ–±-—Å–∞–π—Ç",
            "E-mail",
            "–¢–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
            "–ì–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞"
        ]
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col, value=header)
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = header_alignment
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for row, org in enumerate(data_to_export, 2):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            coords = org.get('coordinates', [])
            coords_str = f"{coords[1]:.6f}, {coords[0]:.6f}" if len(coords) >= 2 else ""
            
            ws.cell(row=row, column=1, value=org.get('name', ''))
            ws.cell(row=row, column=2, value=coords_str)
            ws.cell(row=row, column=3, value=org.get('yandex_id', ''))
            ws.cell(row=row, column=4, value=org.get('full_address', ''))
            ws.cell(row=row, column=5, value=org.get('website', ''))
            ws.cell(row=row, column=6, value=org.get('email', ''))
            ws.cell(row=row, column=7, value=org.get('type', ''))
            ws.cell(row=row, column=8, value=org.get('city', ''))
        
        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        for column in ws.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)  # –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤
            ws.column_dimensions[column_letter].width = adjusted_width
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        excel_buffer = io.BytesIO()
        wb.save(excel_buffer)
        excel_buffer.seek(0)
        
        # –ü—Ä–æ—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        city_mapping = {
            '–±—ç—Ç—Ç–∞': 'betta',
            '–º–æ—Å–∫–≤–∞': 'moscow', 
            '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥': 'saint_petersburg',
            '—Å–æ—á–∏': 'sochi',
            '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 'ekaterinburg',
            '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 'novosibirsk',
            '–∫–∞–∑–∞–Ω—å': 'kazan',
            '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥': 'nizhny_novgorod',
            '—á–µ–ª—è–±–∏–Ω—Å–∫': 'chelyabinsk',
            '—Å–∞–º–∞—Ä–∞': 'samara',
            '–æ–º—Å–∫': 'omsk',
            '—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É': 'rostov_on_don',
            '—É—Ñ–∞': 'ufa',
            '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': 'krasnoyarsk',
            '–ø–µ—Ä–º—å': 'perm',
            '–≤–æ–ª–≥–æ–≥—Ä–∞–¥': 'volgograd',
            '–≤–æ—Ä–æ–Ω–µ–∂': 'voronezh',
            '—Å–∞—Ä–∞—Ç–æ–≤': 'saratov',
            '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä': 'krasnodar',
            '—Ç–æ–ª—å—è—Ç—Ç–∏': 'tolyatti'
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–ø–ø–∏–Ω–≥ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è
        safe_city_name = city_mapping.get(city_name.lower(), city_name.lower().replace(' ', '_').replace('-', '_'))
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
        safe_city_name = ''.join(c for c in safe_city_name if c.isalpha() or c == '_')
        
        filename = f"{safe_city_name}.xlsx"
        
        print(f"‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filename}")
        
        return send_file(
            excel_buffer,
            as_attachment=True,
            download_name=filename,
            mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {str(e)}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {str(e)}'}), 500

@app.route('/api/get_status', methods=['GET'])
def get_status():
    return jsonify({
        'processes': current_processes,
        'organizations_count': len(organizations_data)
    })

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
