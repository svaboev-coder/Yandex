from flask import Flask, request, jsonify, send_file, render_template
from flask_cors import CORS
import requests
import os
from dotenv import load_dotenv
import json
import threading
import time
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, PatternFill
import io
import pickle
from datetime import datetime
import math

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
# –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –§–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ API
load_dotenv()

app = Flask(__name__)
CORS(app)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
current_processes = {
    'search_names': False,
    'search_emails': False
}

organizations_data = []

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
@app.route('/')
def index():
    return render_template('index.html')

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
def save_organizations_data(data, city):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –≤ —Ñ–∞–π–ª"""
    try:
        filename = f"data_{city.replace(' ', '_')}.pkl"
        filepath = os.path.join('exports', filename)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs('exports', exist_ok=True)
        
        with open(filepath, 'wb') as f:
            pickle.dump(data, f)
        print(f"üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filepath}")
        return filepath
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def load_organizations_data(city):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        filename = f"data_{city.replace(' ', '_')}.pkl"
        filepath = os.path.join('exports', filename)
        
        if os.path.exists(filepath):
            with open(filepath, 'rb') as f:
                data = pickle.load(f)
            print(f"üìÇ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞: {filepath}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(data)}")
            return data
        else:
            print(f"üìÇ –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
            return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

class YandexSearchAPI:
    def __init__(self):
        # –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –§–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ API
        self.api_key = os.getenv('YANDEX_SEARCH__API_KEY')
        self.base_url = 'https://search-maps.yandex.ru/v1/'
    
    def radius_to_spn(self, radius_km, latitude):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–∞–¥–∏—É—Å –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä spn –¥–ª—è –Ø–Ω–¥–µ–∫—Å API"""
        # 1 –≥—Ä–∞–¥—É—Å —à–∏—Ä–æ—Ç—ã ‚âà 111 –∫–º
        lat_spn = radius_km / 111.0
        
        # 1 –≥—Ä–∞–¥—É—Å –¥–æ–ª–≥–æ—Ç—ã –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —à–∏—Ä–æ—Ç—ã
        # –ù–∞ —ç–∫–≤–∞—Ç–æ—Ä–µ: 1¬∞ ‚âà 111 –∫–º, –Ω–∞ –ø–æ–ª—é—Å–∞—Ö: 1¬∞ ‚âà 0 –∫–º
        lon_spn = radius_km / (111.0 * abs(math.cos(math.radians(latitude))))
        
        return f"{lon_spn:.6f},{lat_spn:.6f}"
        
    
    def search_organizations(self, city=None, selected_types=None, stop_flag=None, coordinates=None, radius=5):
        """–ü–æ–∏—Å–∫ –∫—É—Ä–æ—Ä—Ç–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
        print(f"üîë API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω: {'–î–∞' if self.api_key else '–ù–µ—Ç'}")
        print(f"üîë –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã: {selected_types}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
        search_by_coordinates = coordinates is not None and len(coordinates) == 2
        if search_by_coordinates:
            lon, lat = coordinates
            print(f"üéØ –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞: –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º {lat:.6f}, {lon:.6f}, —Ä–∞–¥–∏—É—Å {radius} –∫–º")
        else:
            print(f"üèôÔ∏è –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞: –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞ '{city}'")
        
        if not self.api_key:
            print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {'error': 'API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω'}
        
        if search_by_coordinates:
            print(f"–ü–æ–∏—Å–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: {lat:.6f}, {lon:.6f}, —Ä–∞–¥–∏—É—Å {radius} –∫–º")
        else:
            print(f"–ü–æ–∏—Å–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –≤ –≥–æ—Ä–æ–¥–µ: {city}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
        organization_types = selected_types
        
        results = []
        
        for i, org_type in enumerate(organization_types):
            print(f"[{i+1}/{len(organization_types)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏–ø: {org_type}")
            
            if stop_flag and stop_flag():
                print(f"–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Ç–∏–ø–µ: {org_type}")
                break
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –∫–Ω–æ–ø–∫–∏ –°–¢–û–ü
            import time
            time.sleep(1)
                
            if search_by_coordinates:
                # –ü–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –∏ —Ä–∞–¥–∏—É—Å—É
                query = org_type
                print(f"–§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: '{query}'")
                print(f"üîç –¢–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: '{org_type}'")
                print(f"üîç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat:.6f}, {lon:.6f}")
                print(f"üîç –†–∞–¥–∏—É—Å: {radius} –∫–º")
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–∞–¥–∏—É—Å –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä spn –¥–ª—è –Ø–Ω–¥–µ–∫—Å API
                spn = self.radius_to_spn(radius, lat)
                print(f"üîç SPN –ø–∞—Ä–∞–º–µ—Ç—Ä: {spn}")
                
                params = {
                    'text': query,
                    'type': 'biz',
                    'lang': 'ru_RU',
                    'apikey': self.api_key,
                    'll': f"{lon},{lat}",  # –¶–µ–Ω—Ç—Ä –ø–æ–∏—Å–∫–∞
                    'spn': spn,  # –†–∞–∑–º–µ—Ä –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞
                    'results': 20
                }
            else:
                # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞ (—Å—Ç–∞—Ä—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)
                query = f"{org_type} {city}"
                print(f"–§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å: '{query}'")
                print(f"üîç –¢–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: '{org_type}'")
                print(f"üîç –ì–æ—Ä–æ–¥: '{city}'")
                params = {
                    'text': query,
                    'type': 'biz',
                    'lang': 'ru_RU',
                    'apikey': self.api_key,
                    'results': 20
                }
            
            try:
                print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API: {self.base_url}")
                response = requests.get(self.base_url, params=params, timeout=10)
                print(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: —Å—Ç–∞—Ç—É—Å {response.status_code}")
                
                if response.status_code == 403:
                    print(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ç–∏–ø–∞ '{org_type}'")
                    continue
                
                if response.status_code == 200:
                    data = response.json()
                    print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ Yandex API: {list(data.keys())}")
                    
                    features = data.get('features', [])
                    print(f"üìä API –≤–µ—Ä–Ω—É–ª {len(features)} –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–∏–ø–∞ '{org_type}'")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–µ—Ä–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    if features:
                        first_feature = features[0]
                        print(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ–±—ä–µ–∫—Ç–∞: {list(first_feature.keys())}")
                        print(f"üìä Properties: {list(first_feature.get('properties', {}).keys())}")
                        print(f"üìä Geometry: {list(first_feature.get('geometry', {}).keys())}")
                    
                    if len(features) == 0:
                        print(f"–ù–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π —Ç–∏–ø–∞ '{org_type}' –≤ –≥–æ—Ä–æ–¥–µ '{city}'")
                        continue
                    
                    added_count = 0
                    for j, feature in enumerate(features):
                        if stop_flag():
                            print(f"–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—ä–µ–∫—Ç–∞ {j+1} —Ç–∏–ø–∞ {org_type}")
                            break
                            
                        properties = feature.get('properties', {})
                        geometry = feature.get('geometry', {})
                        
                        org_name = properties.get('name', '')
                        org_description = properties.get('description', '')
                        
                        print(f"  [{j+1}/{len(features)}] –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: '{org_name}'")
                        print(f"      –ê–¥—Ä–µ—Å: '{org_description}'")
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ CompanyMetaData
                        company_meta = properties.get('CompanyMetaData', {})
                        yandex_id = company_meta.get('id', '')
                        full_address = company_meta.get('address', org_description)
                        website = company_meta.get('url', '')
                        
                        print(f"      ID –∏–∑ CompanyMetaData: {yandex_id}")
                        print(f"      –ê–¥—Ä–µ—Å –∏–∑ CompanyMetaData: {full_address}")
                        print(f"      –í–µ–±-—Å–∞–π—Ç –∏–∑ CompanyMetaData: {website}")
                        
                        org_data = {
                            'name': org_name,
                            'coordinates': geometry.get('coordinates', []),
                            'yandex_id': yandex_id or f"yandex_{len(results)+1:04d}_{org_type.replace(' ', '_')}",
                            'full_address': full_address or org_description,
                            'website': website or f"https://{org_name[:15].replace(' ', '').lower()}.ru",
                            'email': '',         # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω LLM
                            'type': org_type,
                            'city': city
                        }
                        
                        if org_data['name'] and org_data not in results:
                            results.append(org_data)
                            added_count += 1
                            print(f"      ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (ID: {org_data['yandex_id']}, –°–∞–π—Ç: {org_data['website']})")
                        else:
                            print(f"      ‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–∞ (–¥—É–±–ª–∏–∫–∞—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ)")
                    
                    print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –Ω–æ–≤—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π —Ç–∏–ø–∞ '{org_type}'")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                    print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text[:200]}...")
                    
            except Exception as e:
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ {org_type}: {e}")
                continue
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
            time.sleep(0.5)
                
            print(f"–ó–∞–≤–µ—Ä—à–µ–Ω –ø–æ–∏—Å–∫ —Ç–∏–ø–∞ '{org_type}'. –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(results)}")
            print("-" * 50)
        
        print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: {len(results)}")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–∏–ø–∞–º (–∫–∞–∫ –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        print(f"üîç –î–æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(results)} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")
        print(f"üîç –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã: {selected_types}")
        for i, org in enumerate(results[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"  [{i+1}] {org.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - –¢–∏–ø: '{org.get('type', '–ù–µ—Ç')}'")
        
        filtered_results = [org for org in results if org['type'] in selected_types]
        print(f"üîç –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º: {len(filtered_results)} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É –∏ —Å–∞–π—Ç—É
        deduplicated_results = self.remove_duplicates(filtered_results)
        print(f"üîç –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(deduplicated_results)} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")
        
        return {'organizations': deduplicated_results}
    
    def remove_duplicates(self, organizations):
        """–£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø–æ –∞–¥—Ä–µ—Å—É –∏ —Å–∞–π—Ç—É"""
        seen_addresses = set()
        seen_websites = set()
        unique_organizations = []
        
        for org in organizations:
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∏ —Å–∞–π—Ç
            address = org.get('full_address', '').strip().lower()
            website = org.get('website', '').strip().lower()
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            address_key = address if address else f"no_address_{org.get('yandex_id', '')}"
            website_key = website if website else f"no_website_{org.get('yandex_id', '')}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–ª–∏—Å—å –ª–∏ —É–∂–µ —Ç–∞–∫–∏–µ –∞–¥—Ä–µ—Å –∏–ª–∏ —Å–∞–π—Ç
            is_duplicate = False
            
            if address and address in seen_addresses:
                print(f"üîÑ –ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –ø–æ –∞–¥—Ä–µ—Å—É: {org.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - {address}")
                is_duplicate = True
            
            if website and website in seen_websites:
                print(f"üîÑ –ù–∞–π–¥–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –ø–æ —Å–∞–π—Ç—É: {org.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - {website}")
                is_duplicate = True
            
            if not is_duplicate:
                unique_organizations.append(org)
                seen_addresses.add(address_key)
                seen_websites.add(website_key)
            else:
                print(f"‚ùå –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç: {org.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        
        removed_count = len(organizations) - len(unique_organizations)
        if removed_count > 0:
            print(f"üßπ –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {removed_count}")
        
        return unique_organizations
    
    def get_organization_details_by_coordinates(self, lon, lat, stop_flag):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
        if not self.api_key:
            return {'error': 'API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω'}
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π –≥–µ–æ–∫–æ–¥–∏–Ω–≥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        params = {
            'geocode': f"{lon},{lat}",
            'kind': 'house',
            'format': 'json',
            'results': 1,
            'lang': 'ru_RU',
            'apikey': self.api_key
        }
        
        try:
            print(f"      üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: {lat}, {lon}")
            response = requests.get("https://geocode-maps.yandex.ru/1.x/", params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                features = data.get('response', {}).get('GeoObjectCollection', {}).get('featureMember', [])
                
                if features:
                    feature = features[0]
                    properties = feature.get('GeoObject', {}).get('metaDataProperty', {}).get('GeocoderMetaData', {})
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    yandex_id = properties.get('id', '')
                    full_address = properties.get('text', '')
                    
                    print(f"      üìç –ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ID={yandex_id[:20]}..., –ê–¥—Ä–µ—Å={full_address[:50]}...")
                    
                    return {
                        'yandex_id': yandex_id,
                        'full_address': full_address,
                        'website': '',  # –í –≥–µ–æ–∫–æ–¥–∏–Ω–≥–µ –Ω–µ—Ç –≤–µ–±-—Å–∞–π—Ç–∞
                        'phone': '',
                        'hours': ''
                    }
                else:
                    print(f"      ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º")
                    return {'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º'}
            else:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞: {response.status_code}")
                return {'error': f'–û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏–Ω–≥–∞: {response.status_code}'}
                
        except Exception as e:
            print(f"      ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≥–µ–æ–∫–æ–¥–∏–Ω–≥–µ: {e}")
            return {'error': f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}'}

    def search_website_by_name(self, org_name, city, stop_flag):
        """–ü–æ–∏—Å–∫ –≤–µ–±-—Å–∞–π—Ç–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"""
        if not self.api_key:
            return {'error': 'API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω'}
        
        # –ò—â–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –ø–æ —Ç–æ—á–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
        params = {
            'text': f"{org_name} {city}",
            'type': 'biz',
            'lang': 'ru_RU',
            'results': 1,
            'apikey': self.api_key
        }
        
        try:
            print(f"      üåê –ò—â–µ–º –≤–µ–±-—Å–∞–π—Ç –¥–ª—è: {org_name}")
            response = requests.get(self.base_url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                features = data.get('features', [])
                
                if features:
                    feature = features[0]
                    properties = feature.get('properties', {})
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–µ–±-—Å–∞–π—Ç–∞
                    website = (properties.get('website', '') or 
                             properties.get('url', '') or 
                             properties.get('site', '') or 
                             properties.get('web', ''))
                    
                    if website:
                        print(f"      üåê –ù–∞–π–¥–µ–Ω –≤–µ–±-—Å–∞–π—Ç: {website}")
                        return {'website': website}
                    else:
                        print(f"      ‚ùå –í–µ–±-—Å–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        return {'error': '–í–µ–±-—Å–∞–π—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'}
                else:
                    print(f"      ‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–µ–±-—Å–∞–π—Ç–∞")
                    return {'error': '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}
            else:
                print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–µ–±-—Å–∞–π—Ç–∞: {response.status_code}")
                return {'error': f'–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}'}
                
        except Exception as e:
            print(f"      ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–µ–±-—Å–∞–π—Ç–∞: {e}")
            return {'error': f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}'}

    def get_organization_details(self, yandex_id, stop_flag):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ ID"""
        if not self.api_key or not yandex_id:
            return {'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞'}
        
        params = {
            'id': yandex_id,
            'lang': 'ru_RU',
            'apikey': self.api_key
        }
        
        try:
            response = requests.get(f"{self.base_url}details", params=params, timeout=10)
            if response.status_code == 200:
                data = response.json()
                properties = data.get('properties', {})
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å
                address_parts = []
                if properties.get('address'):
                    address_parts.append(properties['address'])
                if properties.get('description'):
                    address_parts.append(properties['description'])
                
                full_address = ', '.join(filter(None, address_parts))
                
                return {
                    'full_address': full_address,
                    'website': properties.get('website', ''),
                    'phone': properties.get('phone', ''),
                    'hours': properties.get('hours', '')
                }
            else:
                return {'error': f'–û—à–∏–±–∫–∞ API: {response.status_code}'}
        except Exception as e:
            return {'error': f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}'}

class ProxyAPIClient:
    def __init__(self):
        self.api_key = os.getenv('PROXYAPI_KEY')
        self.base_url = os.getenv('PROXYAPI_BASE_URL')
    
    def search_email(self, organization_name, city, stop_flag):
        """–ü–æ–∏—Å–∫ email –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ LLM"""
        if not self.api_key or not self.base_url:
            return {'error': 'ProxyAPI credentials –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}
        
        prompt = f"""
        –ù–∞–π–¥–∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π email –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ "{organization_name}" –≤ –≥–æ—Ä–æ–¥–µ {city}.
        –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É—Å–ª—É–≥–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ç–¥—ã—Ö–∞—é—â–∏—Ö (–±–∞–∑–∞ –æ—Ç–¥—ã—Ö–∞, –¥–æ–º –æ—Ç–¥—ã—Ö–∞, –≥–æ—Å—Ç–∏–Ω–∏—Ü–∞, —Å–∞–Ω–∞—Ç–æ—Ä–∏–π, –≥–æ—Å—Ç–µ–≤–æ–π –¥–æ–º, —Ö–æ—Å—Ç–µ–ª).
        
        –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ email –∞–¥—Ä–µ—Å, –µ—Å–ª–∏ –Ω–∞–π–¥–µ—à—å. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ—à—å, –≤–µ—Ä–Ω–∏ "–Ω–µ –Ω–∞–π–¥–µ–Ω".
        """
        
        try:
            headers = {
                'Authorization': f'Bearer {self.api_key}',
                'Content-Type': 'application/json'
            }
            
            data = {
                'model': 'gpt-3.5-turbo',
                'messages': [
                    {'role': 'user', 'content': prompt}
                ],
                'max_tokens': 100
            }
            
            response = requests.post(
                f"{self.base_url}/v1/chat/completions",
                headers=headers,
                json=data,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                email = result.get('choices', [{}])[0].get('message', {}).get('content', '').strip()
                if '@' in email and email != '–Ω–µ –Ω–∞–π–¥–µ–Ω':
                    return {'email': email}
                else:
                    return {'email': '–Ω–µ –Ω–∞–π–¥–µ–Ω'}
            else:
                return {'error': f'–û—à–∏–±–∫–∞ API: {response.status_code}'}
                
        except Exception as e:
            return {'error': f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}'}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–æ–≤
yandex_api = YandexSearchAPI()
proxy_api = ProxyAPIClient()

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–µ–ø–µ—Ä—å –æ–±—Å–ª—É–∂–∏–≤–∞–µ—Ç—Å—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º

def determine_region_by_coordinates(lat, lon):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–≥–∏–æ–Ω –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º"""
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –†–æ—Å—Å–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏
    regions = {
        '–ö—Ä—ã–º': {'lat_min': 44.0, 'lat_max': 46.0, 'lon_min': 32.0, 'lon_max': 37.0},
        '–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π': {'lat_min': 43.0, 'lat_max': 47.0, 'lon_min': 36.0, 'lon_max': 42.0},
        '–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 54.0, 'lat_max': 57.0, 'lon_min': 35.0, 'lon_max': 40.0},
        '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': {'lat_min': 59.0, 'lat_max': 61.0, 'lon_min': 29.0, 'lon_max': 31.0},
        '–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 58.0, 'lat_max': 61.0, 'lon_min': 28.0, 'lon_max': 35.0},
        '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 53.0, 'lat_max': 57.0, 'lon_min': 75.0, 'lon_max': 85.0},
        '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 56.0, 'lat_max': 61.0, 'lon_min': 57.0, 'lon_max': 66.0},
        '–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 52.0, 'lat_max': 57.0, 'lon_min': 57.0, 'lon_max': 65.0},
        '–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 46.0, 'lat_max': 50.0, 'lon_min': 38.0, 'lon_max': 45.0},
        '–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 48.0, 'lat_max': 51.0, 'lon_min': 41.0, 'lon_max': 48.0},
        '–°—Ç–∞–≤—Ä–æ–ø–æ–ª—å—Å–∫–∏–π –∫—Ä–∞–π': {'lat_min': 44.0, 'lat_max': 46.0, 'lon_min': 40.0, 'lon_max': 46.0},
        '–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π': {'lat_min': 42.0, 'lat_max': 48.0, 'lon_min': 130.0, 'lon_max': 140.0},
        '–•–∞–±–∞—Ä–æ–≤—Å–∫–∏–π –∫—Ä–∞–π': {'lat_min': 46.0, 'lat_max': 55.0, 'lon_min': 130.0, 'lon_max': 145.0},
        '–ò—Ä–∫—É—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 51.0, 'lat_max': 60.0, 'lon_min': 95.0, 'lon_max': 120.0},
        '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π': {'lat_min': 51.0, 'lat_max': 70.0, 'lon_min': 80.0, 'lon_max': 110.0},
        '–¢—é–º–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 55.0, 'lat_max': 70.0, 'lon_min': 60.0, 'lon_max': 80.0},
        '–û–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 53.0, 'lat_max': 58.0, 'lon_min': 70.0, 'lon_max': 78.0},
        '–¢–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 55.0, 'lat_max': 61.0, 'lon_min': 75.0, 'lon_max': 90.0},
        '–ö–µ–º–µ—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 52.0, 'lat_max': 57.0, 'lon_min': 84.0, 'lon_max': 90.0},
        '–ê–ª—Ç–∞–π—Å–∫–∏–π –∫—Ä–∞–π': {'lat_min': 50.0, 'lat_max': 54.0, 'lon_min': 78.0, 'lon_max': 87.0},
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë–∞—à–∫–æ—Ä—Ç–æ—Å—Ç–∞–Ω': {'lat_min': 51.0, 'lat_max': 56.0, 'lon_min': 53.0, 'lon_max': 60.0},
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω': {'lat_min': 54.0, 'lat_max': 57.0, 'lon_min': 47.0, 'lon_max': 54.0},
        '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 54.0, 'lat_max': 58.0, 'lon_min': 40.0, 'lon_max': 48.0},
        '–°–∞–º–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 51.0, 'lat_max': 55.0, 'lon_min': 48.0, 'lon_max': 54.0},
        '–°–∞—Ä–∞—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 49.0, 'lat_max': 53.0, 'lon_min': 42.0, 'lon_max': 50.0},
        '–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 49.0, 'lat_max': 52.0, 'lon_min': 38.0, 'lon_max': 43.0},
        '–ë–µ–ª–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 49.0, 'lat_max': 51.0, 'lon_min': 35.0, 'lon_max': 39.0},
        '–ö—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 50.0, 'lat_max': 52.0, 'lon_min': 34.0, 'lon_max': 38.0},
        '–õ–∏–ø–µ—Ü–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 51.0, 'lat_max': 53.0, 'lon_min': 37.0, 'lon_max': 40.0},
        '–¢–∞–º–±–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 51.0, 'lat_max': 54.0, 'lon_min': 40.0, 'lon_max': 43.0},
        '–†—è–∑–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 53.0, 'lat_max': 55.0, 'lon_min': 38.0, 'lon_max': 42.0},
        '–¢—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 53.0, 'lat_max': 55.0, 'lon_min': 35.0, 'lon_max': 39.0},
        '–ö–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 53.0, 'lat_max': 55.0, 'lon_min': 33.0, 'lon_max': 37.0},
        '–°–º–æ–ª–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 53.0, 'lat_max': 56.0, 'lon_min': 30.0, 'lon_max': 35.0},
        '–ë—Ä—è–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 52.0, 'lat_max': 54.0, 'lon_min': 31.0, 'lon_max': 35.0},
        '–û—Ä–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 52.0, 'lat_max': 54.0, 'lon_min': 35.0, 'lon_max': 38.0},
        '–ö–æ—Å—Ç—Ä–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 57.0, 'lat_max': 59.0, 'lon_min': 40.0, 'lon_max': 45.0},
        '–ò–≤–∞–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 56.0, 'lat_max': 58.0, 'lon_min': 39.0, 'lon_max': 43.0},
        '–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 55.0, 'lat_max': 57.0, 'lon_min': 38.0, 'lon_max': 42.0},
        '–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 56.0, 'lat_max': 59.0, 'lon_min': 37.0, 'lon_max': 42.0},
        '–¢–≤–µ—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 55.0, 'lat_max': 58.0, 'lon_min': 31.0, 'lon_max': 37.0},
        '–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 54.0, 'lat_max': 55.0, 'lon_min': 19.0, 'lon_max': 20.0},
        '–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 60.0, 'lat_max': 67.0, 'lon_min': 35.0, 'lon_max': 50.0},
        '–í–æ–ª–æ–≥–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 58.0, 'lat_max': 61.0, 'lon_min': 35.0, 'lon_max': 42.0},
        '–ú—É—Ä–º–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 66.0, 'lat_max': 70.0, 'lon_min': 28.0, 'lon_max': 40.0},
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞—Ä–µ–ª–∏—è': {'lat_min': 60.0, 'lat_max': 67.0, 'lon_min': 29.0, 'lon_max': 37.0},
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–æ–º–∏': {'lat_min': 59.0, 'lat_max': 68.0, 'lon_min': 45.0, 'lon_max': 66.0},
        '–ù–µ–Ω–µ—Ü–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥': {'lat_min': 66.0, 'lat_max': 70.0, 'lon_min': 43.0, 'lon_max': 60.0},
        '–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥': {'lat_min': 58.0, 'lat_max': 66.0, 'lon_min': 60.0, 'lon_max': 85.0},
        '–Ø–º–∞–ª–æ-–ù–µ–Ω–µ—Ü–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥': {'lat_min': 64.0, 'lat_max': 73.0, 'lon_min': 60.0, 'lon_max': 80.0},
        '–ß—É–∫–æ—Ç—Å–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥': {'lat_min': 62.0, 'lat_max': 72.0, 'lon_min': 160.0, 'lon_max': 180.0},
        '–ú–∞–≥–∞–¥–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 58.0, 'lat_max': 66.0, 'lon_min': 140.0, 'lon_max': 160.0},
        '–°–∞—Ö–∞–ª–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 45.0, 'lat_max': 55.0, 'lon_min': 140.0, 'lon_max': 150.0},
        '–ö–∞–º—á–∞—Ç—Å–∫–∏–π –∫—Ä–∞–π': {'lat_min': 50.0, 'lat_max': 65.0, 'lon_min': 155.0, 'lon_max': 165.0},
        '–ê–º—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 48.0, 'lat_max': 57.0, 'lon_min': 119.0, 'lon_max': 135.0},
        '–ï–≤—Ä–µ–π—Å–∫–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 47.0, 'lat_max': 49.0, 'lon_min': 130.0, 'lon_max': 135.0},
        '–ó–∞–±–∞–π–∫–∞–ª—å—Å–∫–∏–π –∫—Ä–∞–π': {'lat_min': 49.0, 'lat_max': 58.0, 'lon_min': 107.0, 'lon_max': 120.0},
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ë—É—Ä—è—Ç–∏—è': {'lat_min': 50.0, 'lat_max': 58.0, 'lon_min': 98.0, 'lon_max': 116.0},
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –°–∞—Ö–∞ (–Ø–∫—É—Ç–∏—è)': {'lat_min': 55.0, 'lat_max': 75.0, 'lon_min': 105.0, 'lon_max': 170.0},
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢—ã–≤–∞': {'lat_min': 49.0, 'lat_max': 54.0, 'lon_min': 88.0, 'lon_max': 100.0},
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –•–∞–∫–∞—Å–∏—è': {'lat_min': 51.0, 'lat_max': 55.0, 'lon_min': 87.0, 'lon_max': 92.0},
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ê–ª—Ç–∞–π': {'lat_min': 49.0, 'lat_max': 52.0, 'lon_min': 84.0, 'lon_max': 90.0},
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞–ª–º—ã–∫–∏—è': {'lat_min': 45.0, 'lat_max': 48.0, 'lon_min': 44.0, 'lon_max': 47.0},
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ê–¥—ã–≥–µ—è': {'lat_min': 44.0, 'lat_max': 45.0, 'lon_min': 38.0, 'lon_max': 40.0},
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞—Ä–∞—á–∞–µ–≤–æ-–ß–µ—Ä–∫–µ—Å–∏—è': {'lat_min': 43.0, 'lat_max': 45.0, 'lon_min': 40.0, 'lon_max': 42.0},
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ö–∞–±–∞—Ä–¥–∏–Ω–æ-–ë–∞–ª–∫–∞—Ä–∏—è': {'lat_min': 43.0, 'lat_max': 44.0, 'lon_min': 42.0, 'lon_max': 44.0},
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –°–µ–≤–µ—Ä–Ω–∞—è –û—Å–µ—Ç–∏—è': {'lat_min': 42.0, 'lat_max': 44.0, 'lon_min': 43.0, 'lon_max': 45.0},
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ò–Ω–≥—É—à–µ—Ç–∏—è': {'lat_min': 42.0, 'lat_max': 43.0, 'lon_min': 44.0, 'lon_max': 45.0},
        '–ß–µ—á–µ–Ω—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞': {'lat_min': 42.0, 'lat_max': 44.0, 'lon_min': 44.0, 'lon_max': 47.0},
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –î–∞–≥–µ—Å—Ç–∞–Ω': {'lat_min': 41.0, 'lat_max': 45.0, 'lon_min': 45.0, 'lon_max': 48.0},
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–æ—Ä–¥–æ–≤–∏—è': {'lat_min': 53.0, 'lat_max': 55.0, 'lon_min': 42.0, 'lon_max': 46.0},
        '–ß—É–≤–∞—à—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞': {'lat_min': 54.0, 'lat_max': 56.0, 'lon_min': 45.0, 'lon_max': 48.0},
        '–£–¥–º—É—Ä—Ç—Å–∫–∞—è –†–µ—Å–ø—É–±–ª–∏–∫–∞': {'lat_min': 55.0, 'lat_max': 58.0, 'lon_min': 51.0, 'lon_max': 54.0},
        '–ü–µ—Ä–º—Å–∫–∏–π –∫—Ä–∞–π': {'lat_min': 56.0, 'lat_max': 61.0, 'lon_min': 51.0, 'lon_max': 60.0},
        '–ö–∏—Ä–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 56.0, 'lat_max': 61.0, 'lon_min': 45.0, 'lon_max': 52.0},
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–∞—Ä–∏–π –≠–ª': {'lat_min': 55.0, 'lat_max': 57.0, 'lon_min': 45.0, 'lon_max': 48.0},
        '–ü–µ–Ω–∑–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 52.0, 'lat_max': 54.0, 'lon_min': 42.0, 'lon_max': 46.0},
        '–£–ª—å—è–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat_min': 52.0, 'lat_max': 55.0, 'lon_min': 46.0, 'lon_max': 50.0},
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ä–µ–≥–∏–æ–Ω
    for region_name, bounds in regions.items():
        if (bounds['lat_min'] <= lat <= bounds['lat_max'] and 
            bounds['lon_min'] <= lon <= bounds['lon_max']):
            return region_name
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–∏–π —Ä–µ–≥–∏–æ–Ω
    return '–†–æ—Å—Å–∏—è'

def search_cities_2gis(city_name):
    """–ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤ —á–µ—Ä–µ–∑ 2GIS API"""
    print(f"üó∫Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º 2GIS API –¥–ª—è –ø–æ–∏—Å–∫–∞: '{city_name}'")
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á 2GIS
    api_key = os.getenv('2GIS_API_KEY')
    if not api_key:
        print("‚ùå API –∫–ª—é—á 2GIS –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return jsonify({'error': 'API –∫–ª—é—á 2GIS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}), 500
    
    # 2GIS API –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
    search_url = 'https://catalog.api.2gis.com/3.0/items'
    
    params = {
        'q': city_name,
        'key': api_key,
        'type': 'adm_div',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü
        'fields': 'items.point,items.name,items.full_name,items.type,items.address',
        'page_size': 10
    }
    
    try:
        response = requests.get(search_url, params=params, timeout=10)
        print(f"üì° 2GIS –æ—Ç–≤–µ—Ç: —Å—Ç–∞—Ç—É—Å {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"üìä 2GIS –Ω–∞—à–µ–ª {len(data.get('result', {}).get('items', []))} –æ–±—ä–µ–∫—Ç–æ–≤")
            
            cities = []
            items = data.get('result', {}).get('items', [])
            
            for i, item in enumerate(items):
                name = item.get('name', '')
                full_name = item.get('full_name', '')
                item_type = item.get('type', '')
                point = item.get('point', {})
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                if point and 'lon' in point and 'lat' in point:
                    lon = float(point['lon'])
                    lat = float(point['lat'])
                else:
                    print(f"  [{i+1}] {name} - –ù–ï–¢ –ö–û–û–†–î–ò–ù–ê–¢ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)")
                    continue
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã (–≥–æ—Ä–æ–¥–∞, —Ä–∞–π–æ–Ω—ã)
                if 'adm_div' in item_type:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–≥–∏–æ–Ω –∏–∑ full_name –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                    region = '–†–æ—Å—Å–∏—è'
                    country = '–†–æ—Å—Å–∏—è'
                    
                    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞
                    if full_name and full_name != name:
                        import re
                        # –ò—â–µ–º —Ä–µ–≥–∏–æ–Ω –≤ –ø–æ–ª–Ω–æ–º –Ω–∞–∑–≤–∞–Ω–∏–∏
                        region_patterns = [
                            r'([–ê-–Ø–∞-—è—ë\s]+(?:–∫—Ä–∞–π|–æ–±–ª–∞—Å—Ç—å|—Ä–µ—Å–ø—É–±–ª–∏–∫–∞|–æ–∫—Ä—É–≥))',
                            r'([–ê-–Ø–∞-—è—ë\s]+(?:—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥))',
                            r'(–ö—Ä—ã–º)',
                            r'(–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å)'
                        ]
                        
                        for pattern in region_patterns:
                            region_match = re.search(pattern, full_name)
                            if region_match:
                                region = region_match.group(1).strip()
                                break
                    
                    # –ï—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
                    if region == '–†–æ—Å—Å–∏—è':
                        region = determine_region_by_coordinates(lat, lon)
                    
                    city_info = {
                        'name': name,
                        'coordinates': [lon, lat],
                        'region': region,
                        'country': country,
                        'full_address': full_name,
                        'search_type': '2gis'
                    }
                    cities.append(city_info)
                    print(f"  [{i+1}] {name} ({item_type}) - –ì–û–†–û–î")
                    print(f"      –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {full_name}")
                    print(f"      –†–µ–≥–∏–æ–Ω: {region}")
                    print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}")
                else:
                    print(f"  [{i+1}] {name} ({item_type}) - –ù–ï –ì–û–†–û–î (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)")
            
            if cities:
                print(f"‚úÖ 2GIS –Ω–∞—à–µ–ª {len(cities)} –≥–æ—Ä–æ–¥–æ–≤")
                return jsonify({'cities': cities})
            else:
                print("‚ùå 2GIS –Ω–µ –Ω–∞—à–µ–ª –≥–æ—Ä–æ–¥–æ–≤")
                return jsonify({'error': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞'}), 404
                
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ 2GIS: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text[:200]}...")
            return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ 2GIS API'}), 500
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ 2GIS: {e}")
        return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ—Ä–æ–¥–æ–≤'}), 500

# def search_cities_nominatim(city_name):
#     """–ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤ —á–µ—Ä–µ–∑ Nominatim API (fallback) - –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–û"""
#     print(f"üåç –ò—Å–ø–æ–ª—å–∑—É–µ–º Nominatim API –¥–ª—è –ø–æ–∏—Å–∫–∞: '{city_name}'")
#     
#     # Nominatim API –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
#     search_url = 'https://nominatim.openstreetmap.org/search'
#     
#     params = {
#         'q': city_name,
#         'format': 'json',
#         'countrycodes': 'ru',  # –¢–æ–ª—å–∫–æ –†–æ—Å—Å–∏—è
#         'limit': 5,
#         'addressdetails': 1
#     }
#     
#     headers = {
#         'User-Agent': 'ResortSearchApp/1.0 (contact@example.com)'
#     }
#     
#     try:
#         response = requests.get(search_url, params=params, headers=headers, timeout=10)
#         print(f"üì° Nominatim –æ—Ç–≤–µ—Ç: —Å—Ç–∞—Ç—É—Å {response.status_code}")
#         
#         if response.status_code == 200:
#             data = response.json()
#             print(f"üìä Nominatim –Ω–∞—à–µ–ª {len(data)} –æ–±—ä–µ–∫—Ç–æ–≤")
#             
#             cities = []
#             for i, item in enumerate(data):
#                 name = item.get('display_name', '')
#                 lat = float(item.get('lat', 0))
#                 lon = float(item.get('lon', 0))
#                 place_type = item.get('type', '')
#                 
#                 # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã
#                 if place_type in ['village', 'city', 'town', 'hamlet', 'locality']:
#                     # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–≥–∏–æ–Ω –∏–∑ display_name
#                     region = '–†–æ—Å—Å–∏—è'
#                     country = '–†–æ—Å—Å–∏—è'
#                     
#                     if name:
#                         import re
#                         region_match = re.search(r'([–ê-–Ø–∞-—è—ë\s]+(?:–∫—Ä–∞–π|–æ–±–ª–∞—Å—Ç—å|—Ä–µ—Å–ø—É–±–ª–∏–∫–∞|–æ–∫—Ä—É–≥))', name)
#                         if region_match:
#                             region = region_match.group(1).strip()
#                     
#                     city_info = {
#                         'name': name.split(',')[0] if ',' in name else name,  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
#                         'coordinates': [lon, lat],
#                         'region': region,
#                         'country': country,
#                         'full_address': name,
#                         'search_type': 'nominatim'
#                     }
#                     cities.append(city_info)
#                     print(f"  [{i+1}] {name} ({place_type}) - –ì–û–†–û–î")
#                     print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {lat}, {lon}")
#                 else:
#                     print(f"  [{i+1}] {name} ({place_type}) - –ù–ï –ì–û–†–û–î (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º)")
#             
#             if cities:
#                 print(f"‚úÖ Nominatim –Ω–∞—à–µ–ª {len(cities)} –≥–æ—Ä–æ–¥–æ–≤")
#                 return jsonify({'cities': cities})
#             else:
#                 print("‚ùå Nominatim –Ω–µ –Ω–∞—à–µ–ª –≥–æ—Ä–æ–¥–æ–≤")
#                 return jsonify({'error': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞'}), 404
#                 
#         else:
#             print(f"‚ùå –û—à–∏–±–∫–∞ Nominatim: {response.status_code}")
#             return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Nominatim API'}), 500
#             
#     except Exception as e:
#         print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ Nominatim: {e}")
#         return jsonify({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ—Ä–æ–¥–æ–≤'}), 500

@app.route('/api/search_cities', methods=['POST'])
def search_cities():
    """–ü–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤ —á–µ—Ä–µ–∑ 2GIS API"""
    print(f"üèôÔ∏è –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –≥–æ—Ä–æ–¥–æ–≤")
    
    data = request.json
    city_name = data.get('city', '').strip()
    
    print(f"üîç –ò—â–µ–º –≥–æ—Ä–æ–¥: '{city_name}'")
    
    if not city_name:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        return jsonify({'error': '–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}), 400
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º 2GIS API –¥–ª—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤
    return search_cities_2gis(city_name)

@app.route('/api/search_organizations', methods=['POST'])
def search_organizations():
    global organizations_data, current_processes
    
    print(f"üöÄ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")
    data = request.json
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞), —Ç–∞–∫ –∏ –Ω–æ–≤—ã–π (–ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º)
    city = data.get('city', '').strip()
    coordinates = data.get('coordinates')  # [lon, lat]
    radius = data.get('radius', 5)  # –†–∞–¥–∏—É—Å –≤ –∫–º, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5
    selected_types = data.get('types', [])
    
    print(f"üèôÔ∏è –ì–æ—Ä–æ–¥: '{city}'")
    print(f"üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coordinates}")
    print(f"üìè –†–∞–¥–∏—É—Å: {radius} –∫–º")
    print(f"üìã –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã: {selected_types}")
    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤: {len(selected_types)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if not coordinates and not city:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω—ã –Ω–∏ –≥–æ—Ä–æ–¥, –Ω–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
        return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω—ã –Ω–∏ –≥–æ—Ä–æ–¥, –Ω–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'}), 400
    
    if not selected_types:
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –≤—ã–±—Ä–∞–Ω—ã —Ç–∏–ø—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")
        return jsonify({'error': '–ù–µ –≤—ã–±—Ä–∞–Ω—ã —Ç–∏–ø—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π'}), 400
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
    if coordinates and len(coordinates) == 2:
        lon, lat = coordinates
        print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: {lat:.6f}, {lon:.6f}, —Ä–∞–¥–∏—É—Å {radius} –∫–º")
    else:
        print(f"üèôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞: {city}")
        if not city:
            print("‚ùå –û—à–∏–±–∫–∞: –ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω")
            return jsonify({'error': '–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω'}), 400
    
    # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø–æ–∏—Å–∫–µ
    global organizations_data
    organizations_data = []
    
    current_processes['search_names'] = True
    
    def search_task():
        global organizations_data, current_processes
        try:
            print(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –≤ –≥–æ—Ä–æ–¥–µ: {city}")
            print(f"–§–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {current_processes['search_names']}")
            
            # –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞
            if coordinates and len(coordinates) == 2:
                result = yandex_api.search_organizations(
                    city=None, 
                    selected_types=selected_types, 
                    stop_flag=lambda: not current_processes['search_names'],
                    coordinates=coordinates,
                    radius=radius
                )
            else:
                result = yandex_api.search_organizations(
                    city=city, 
                    selected_types=selected_types, 
                    stop_flag=lambda: not current_processes['search_names']
                )
            
            print(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {result}")
            
            if 'error' not in result:
                global organizations_data
                organizations_data = result['organizations']
                print(f"‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ {len(organizations_data)} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")
                print(f"üìä –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ organizations_data: {len(organizations_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞: organizations_data —Å–æ–¥–µ—Ä–∂–∏—Ç {len(organizations_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
                if coordinates and len(coordinates) == 2:
                    # –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                    city_name_for_file = f"coords_{coordinates[1]:.4f}_{coordinates[0]:.4f}_r{radius}"
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    old_filepath = os.path.join('exports', f"data_{city_name_for_file.replace(' ', '_')}.pkl")
                    if os.path.exists(old_filepath):
                        os.remove(old_filepath)
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {old_filepath}")
                    save_organizations_data(organizations_data, city_name_for_file)
                else:
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    old_filepath = os.path.join('exports', f"data_{city.replace(' ', '_')}.pkl")
                    if os.path.exists(old_filepath):
                        os.remove(old_filepath)
                        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª: {old_filepath}")
                    save_organizations_data(organizations_data, city)
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {result['error']}")
                
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø–æ–∏—Å–∫–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: {e}")
        finally:
            current_processes['search_names'] = False
            print(f"üèÅ –ü—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω. –§–ª–∞–≥: {current_processes['search_names']}")
    
    # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = threading.Thread(target=search_task)
    thread.start()
    
    return jsonify({'message': f'–ü–æ–∏—Å–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –≤ –≥–æ—Ä–æ–¥–µ {city} –∑–∞–ø—É—â–µ–Ω'})

@app.route('/api/search_emails', methods=['POST'])
def search_emails():
    global organizations_data, current_processes
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    data = request.json
    city = data.get('city', '').strip()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
    organizations_data = load_organizations_data(city)
    
    if not organizations_data:
        return jsonify({'error': '–°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'}), 400
    
    current_processes['search_emails'] = True
    
    def email_search_task():
        global organizations_data, current_processes
        try:
            for i, org in enumerate(organizations_data):
                if not current_processes['search_emails']:
                    break
                
                if not org.get('email'):
                    result = proxy_api.search_email(org['name'], org.get('city', ''), 
                                                  lambda: not current_processes['search_emails'])
                    if 'email' in result:
                        organizations_data[i]['email'] = result['email']
                
                time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ email: {e}")
        finally:
            current_processes['search_emails'] = False
    
    thread = threading.Thread(target=email_search_task)
    thread.start()
    
    return jsonify({'message': '–ü–æ–∏—Å–∫ email –∞–¥—Ä–µ—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω'})


@app.route('/api/get_organizations', methods=['GET'])
def get_organizations():
    global organizations_data
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    city = request.args.get('city', '').strip()
    coordinates = request.args.get('coordinates', '').strip()
    radius = request.args.get('radius', '5').strip()
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if organizations_data:
        print(f"üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: {len(organizations_data)} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")
        data_to_return = organizations_data
    elif city:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞
        data_to_return = load_organizations_data(city)
        print(f"üì§ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'. –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(data_to_return)} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")
    elif coordinates:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        try:
            coords_parts = coordinates.split(',')
            if len(coords_parts) == 2:
                lat, lon = float(coords_parts[0]), float(coords_parts[1])
                city_name_for_file = f"coords_{lat:.4f}_{lon:.4f}_r{radius}"
                data_to_return = load_organizations_data(city_name_for_file)
                print(f"üì§ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç '{coordinates}', —Ä–∞–¥–∏—É—Å {radius} –∫–º. –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(data_to_return)} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")
            else:
                data_to_return = []
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {coordinates}")
        except ValueError:
            data_to_return = []
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {coordinates}")
    else:
        # –ï—Å–ª–∏ –Ω–∏ –≥–æ—Ä–æ–¥, –Ω–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        data_to_return = []
        print(f"üì§ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.")
    
    print(f"üìä –¢–µ–∫—É—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: {current_processes}")
    
    if data_to_return:
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º {len(data_to_return)} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")
        for i, org in enumerate(data_to_return[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
            print(f"  [{i+1}] {org.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - ID: {org.get('yandex_id', '–ù–µ—Ç')} - –¢–∏–ø: {org.get('type', '–ù–µ—Ç')}")
        if len(data_to_return) > 5:
            print(f"  ... –∏ –µ—â–µ {len(data_to_return) - 5} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")
    else:
        print("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        
    return jsonify({'organizations': data_to_return})

@app.route('/api/stop_process', methods=['POST'])
def stop_process():
    data = request.json
    process_type = data.get('process_type')
    
    print(f"üõë –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –ø—Ä–æ—Ü–µ—Å—Å–∞: {process_type}")
    print(f"–¢–µ–∫—É—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: {current_processes}")
    
    if process_type in current_processes:
        old_value = current_processes[process_type]
        current_processes[process_type] = False
        print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {process_type} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–±—ã–ª–æ: {old_value}, —Å—Ç–∞–ª–æ: {current_processes[process_type]})")
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: {current_processes}")
        return jsonify({'message': f'–ü—Ä–æ—Ü–µ—Å—Å {process_type} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'})
    
    print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ—Ü–µ—Å—Å–∞: {process_type}")
    print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã: {list(current_processes.keys())}")
    return jsonify({'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ—Ü–µ—Å—Å–∞'}), 400

@app.route('/api/export_excel', methods=['GET'])
def export_excel():
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –≤ Excel —Ñ–∞–π–ª"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        city_name = request.args.get('city', '').strip()
        coordinates = request.args.get('coordinates', '').strip()
        radius = request.args.get('radius', '5').strip()
        
        print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞: city='{city_name}', coordinates='{coordinates}', radius='{radius}'")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
        if city_name and not coordinates:
            # –≠–∫—Å–ø–æ—Ä—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞ (—Å—Ç–∞—Ä—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)
            data_to_export = load_organizations_data(city_name)
            file_source = f"–≥–æ—Ä–æ–¥ '{city_name}'"
        elif coordinates:
            # –≠–∫—Å–ø–æ—Ä—Ç –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
            try:
                coords_parts = coordinates.split(',')
                if len(coords_parts) == 2:
                    lat, lon = float(coords_parts[0]), float(coords_parts[1])
                    city_name_for_file = f"coords_{lat:.4f}_{lon:.4f}_r{radius}"
                    data_to_export = load_organizations_data(city_name_for_file)
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö
                    if city_name:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∏–∑ frontend
                        extracted_city_name = city_name
                        file_source = f"–≥–æ—Ä–æ–¥ '{city_name}' (–ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º)"
                        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞: '{city_name}'")
                    else:
                        # Fallback: –∏–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
                        extracted_city_name = None
                        if data_to_export:
                            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –∞–¥—Ä–µ—Å–∞
                            first_org = data_to_export[0]
                            full_address = first_org.get('full_address', '')
                            print(f"üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –∞–¥—Ä–µ—Å–∞: '{full_address}'")
                            
                            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "—Ö—É—Ç–æ—Ä –ë–µ—Ç—Ç–∞", "—Å–µ–ª–æ –ö—Ä–∏–Ω–∏—Ü–∞", "–≥–æ—Ä–æ–¥ –ú–æ—Å–∫–≤–∞", "–ì–µ–ª–µ–Ω–¥–∂–∏–∫"
                            import re
                            city_patterns = [
                                r'(—Ö—É—Ç–æ—Ä|—Å–µ–ª–æ|–¥–µ—Ä–µ–≤–Ω—è|–ø–æ—Å—ë–ª–æ–∫|–≥–æ—Ä–æ–¥|—Å—Ç–∞–Ω–∏—Ü–∞|–∞—É–ª|–∫–∏—à–ª–∞–∫)\s+([–ê-–Ø–∞-—è—ë]+)',
                                r'([–ê-–Ø–∞-—è—ë]+)\s+(—Ö—É—Ç–æ—Ä|—Å–µ–ª–æ|–¥–µ—Ä–µ–≤–Ω—è|–ø–æ—Å—ë–ª–æ–∫|–≥–æ—Ä–æ–¥|—Å—Ç–∞–Ω–∏—Ü–∞|–∞—É–ª|–∫–∏—à–ª–∞–∫)',
                                r'([–ê-–Ø–∞-—è—ë]+),\s*–†–æ—Å—Å–∏—è',  # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤ —Ç–∏–ø–∞ "–ì–µ–ª–µ–Ω–¥–∂–∏–∫, –†–æ—Å—Å–∏—è"
                                r'([–ê-–Ø–∞-—è—ë]+),\s*[–ê-–Ø–∞-—è—ë\s]+,\s*[–ê-–Ø–∞-—è—ë\s]+,\s*[–ê-–Ø–∞-—è—ë\s]+',  # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è "–ì–µ–ª–µ–Ω–¥–∂–∏–∫, —É–ª–∏—Ü–∞..."
                                r'([–ê-–Ø–∞-—è—ë]+),\s*—É–ª–∏—Ü–∞',  # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è "–ì–µ–ª–µ–Ω–¥–∂–∏–∫, —É–ª–∏—Ü–∞"
                            ]
                            
                            for i, pattern in enumerate(city_patterns):
                                match = re.search(pattern, full_address, re.IGNORECASE)
                                print(f"üîç –ü–∞—Ç—Ç–µ—Ä–Ω {i+1}: '{pattern}' -> {match}")
                                if match:
                                    if '—Ö—É—Ç–æ—Ä' in match.group(0).lower() or '—Å–µ–ª–æ' in match.group(0).lower():
                                        extracted_city_name = match.group(2) if len(match.groups()) > 1 else match.group(1)
                                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç: '{extracted_city_name}'")
                                        break
                                    elif '—Ä–æ—Å—Å–∏—è' in match.group(0).lower():
                                        # –î–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ "–ì–æ—Ä–æ–¥, –†–æ—Å—Å–∏—è" –±–µ—Ä–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
                                        extracted_city_name = match.group(1)
                                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥ (–†–æ—Å—Å–∏—è): '{extracted_city_name}'")
                                        break
                                    elif i == 3:  # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è "–ì–µ–ª–µ–Ω–¥–∂–∏–∫, —É–ª–∏—Ü–∞..."
                                        extracted_city_name = match.group(1)
                                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥ (–æ–±—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω): '{extracted_city_name}'")
                                        break
                                    elif i == 4:  # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è "–ì–µ–ª–µ–Ω–¥–∂–∏–∫, —É–ª–∏—Ü–∞"
                                        extracted_city_name = match.group(1)
                                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥ (—É–ª–∏—Ü–∞): '{extracted_city_name}'")
                                        break
                        
                        if extracted_city_name:
                            city_name = extracted_city_name.lower()
                            file_source = f"–≥–æ—Ä–æ–¥ '{extracted_city_name}' (–ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º)"
                        else:
                            file_source = f"–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã {lat:.4f}, {lon:.4f}, —Ä–∞–¥–∏—É—Å {radius} –∫–º"
                else:
                    return jsonify({'error': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç'}), 400
            except ValueError:
                return jsonify({'error': '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç'}), 400
        else:
            return jsonify({'error': '–ù–µ —É–∫–∞–∑–∞–Ω—ã –Ω–∏ –≥–æ—Ä–æ–¥, –Ω–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã'}), 400
        
        print(f"üìä –ó–∞–ø—Ä–æ—Å –Ω–∞ —ç–∫—Å–ø–æ—Ä—Ç Excel. –ò—Å—Ç–æ—á–Ω–∏–∫: {file_source}, –ù–∞–π–¥–µ–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: {len(data_to_export)}")
        
        if not data_to_export:
            return jsonify({'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞'}), 400
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É
        wb = Workbook()
        ws = wb.active
        ws.title = "–ö—É—Ä–æ—Ä—Ç–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"
        
        # –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        header_font = Font(bold=True, color="FFFFFF")
        header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        header_alignment = Alignment(horizontal="center", vertical="center")
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
        headers = [
            "–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
            "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—à–∏—Ä–æ—Ç–∞/–¥–æ–ª–≥–æ—Ç–∞)", 
            "ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
            "–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å",
            "–í–µ–±-—Å–∞–π—Ç",
            "E-mail",
            "–¢–∏–ø –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
            "–ì–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞"
        ]
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=1, column=col, value=header)
            cell.font = header_font
            cell.fill = header_fill
            cell.alignment = header_alignment
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for row, org in enumerate(data_to_export, 2):
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            coords = org.get('coordinates', [])
            coords_str = f"{coords[1]:.6f}, {coords[0]:.6f}" if len(coords) >= 2 else ""
            
            ws.cell(row=row, column=1, value=org.get('name', ''))
            ws.cell(row=row, column=2, value=coords_str)
            ws.cell(row=row, column=3, value=org.get('yandex_id', ''))
            ws.cell(row=row, column=4, value=org.get('full_address', ''))
            ws.cell(row=row, column=5, value=org.get('website', ''))
            ws.cell(row=row, column=6, value=org.get('email', ''))
            ws.cell(row=row, column=7, value=org.get('type', ''))
            ws.cell(row=row, column=8, value=org.get('city', ''))
        
        # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        for column in ws.columns:
            max_length = 0
            column_letter = column[0].column_letter
            for cell in column:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                except:
                    pass
            adjusted_width = min(max_length + 2, 50)  # –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤
            ws.column_dimensions[column_letter].width = adjusted_width
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        excel_buffer = io.BytesIO()
        wb.save(excel_buffer)
        excel_buffer.seek(0)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        # –ü—Ä–æ—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        city_mapping = {
            '–±—ç—Ç—Ç–∞': 'betta',
            '–º–æ—Å–∫–≤–∞': 'moscow', 
            '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥': 'saint_petersburg',
            '—Å–æ—á–∏': 'sochi',
            '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 'ekaterinburg',
            '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 'novosibirsk',
            '–∫–∞–∑–∞–Ω—å': 'kazan',
            '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥': 'nizhny_novgorod',
            '—á–µ–ª—è–±–∏–Ω—Å–∫': 'chelyabinsk',
            '—Å–∞–º–∞—Ä–∞': 'samara',
            '–æ–º—Å–∫': 'omsk',
            '—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É': 'rostov_on_don',
            '—É—Ñ–∞': 'ufa',
            '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': 'krasnoyarsk',
            '–ø–µ—Ä–º—å': 'perm',
            '–≤–æ–ª–≥–æ–≥—Ä–∞–¥': 'volgograd',
            '–≤–æ—Ä–æ–Ω–µ–∂': 'voronezh',
            '—Å–∞—Ä–∞—Ç–æ–≤': 'saratov',
            '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä': 'krasnodar',
            '—Ç–æ–ª—å—è—Ç—Ç–∏': 'tolyatti',
            '–≥–µ–ª–µ–Ω–¥–∂–∏–∫': 'gelendzhik'
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–ø–ø–∏–Ω–≥ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è
        safe_city_name = city_mapping.get(city_name.lower(), city_name.lower().replace(' ', '_').replace('-', '_'))
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
        safe_city_name = ''.join(c for c in safe_city_name if c.isalpha() or c == '_')
        filename = f"{safe_city_name} + {radius}–∫–º.xlsx"
        
        print(f"‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filename}")
        
        return send_file(
            excel_buffer,
            as_attachment=True,
            download_name=filename,
            mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {str(e)}")
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {str(e)}'}), 500

@app.route('/api/get_status', methods=['GET'])
def get_status():
    return jsonify({
        'processes': current_processes,
        'organizations_count': len(organizations_data)
    })

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
